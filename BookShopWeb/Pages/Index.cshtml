@page
@model BookShopWeb.Pages.IndexModel
@{
}

<h1>Welcome to BookShop</h1>

<div id="app">
    @* mt - Margin Top, mb - Margin Bottom, m - Margin (left/right) *@
    <div class="mt-2 mb-2">
        <input class="form-control" placeholder="Name" v-model="name" />
        <input class="form-control" placeholder="Year" v-model="year" />
        <input class="form-control" placeholder="Price" v-model="price" />

        <button class="btn btn-primary mt-2 mb-2" style="width:100px" v-on:click="addBook">Add</button>
    </div>

    <table class="table table-hover table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Publish Year</th>
                <th>Price</th>
            </tr>
        </thead>
        <tbody>
            <tr v-for="book in books">
                <td>{{ book.name }}</td>
                <td>{{ book.year }}</td>
                <td>{{ book.price }}</td>
            </tr>
        </tbody>
    </table>
</div>

@* Razor section (name as mentioned inside layout) *@
@section scripts{
    <script>
        var app = new Vue({
            el: "#app",
            data: {
                books: [],
                name: "",
                year: "",
                price: "",
                message: "Hello from Vue"
            },
            mounted: function () {
                //VueJS feature - Mounted gets called when the page is fully loaded and the user is about to use the page.
                //This is where we should be loading data from backend to frontend. Why? --> Because we want everything in the page to be loaded and ready (html + css)
                //Good Idea - To add a spinner or progress bar for bigger applications (with loads of REAL data from the backend)!
                this.getBooks();
            },
            methods: {
                addBook: function () {
                    //Good Practice - Always create a variable with the current instance (ViewModel) while working with VueJS
                    var vm = this;

                    //Adding a client-side book to the data, but not being sent to the server to be saved in the database.
                    var newBook = {
                        name: vm.name,
                        year: vm.year,
                        price: vm.price
                    };

                    //Post this data to server through ajax
                    $.ajax({
                        url: "/api/book/",
                        method: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(newBook)   //this method converts the JSON data into string to be sent to server through ajax
                    }).done(function (model) {   //done - Makes sure that the book gets added only when the connection from client to server is SUCCESS!
                        //Adding a new book to the 'books' collection. Using Splice(start, delete, content) makes it super easy!
                        //vm.books.splice(0, 0, newBook);

                        //ID for the model being sent by the client is needed. Instead of above, use below -
                        //Helps when the model class doesn't have an ID of its own. This case, the server generates a unique ID to be used by the client.
                        vm.books.splice(0, 0, model);
                    })
                    
                },
                getBooks: function () {
                    //JQUery - Simplest and easiest library to use with ajax
                    var vm = this;

                    $.ajax({ url: "/api/book/", method: "GET" })
                        .done(function (data) {
                            vm.books = data;
                        })
                }
            }
        });
    </script>
}